/* automatically generated by rust-bindgen */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImDrawListSharedData {
        _unused: [u8; 0],
    }
    pub type ImTextureID = *mut ::std::os::raw::c_void;
    pub type ImWchar = ::std::os::raw::c_ushort;
    pub type ImGuiMouseCursor = ::std::os::raw::c_int;
    pub type ImDrawCornerFlags = ::std::os::raw::c_int;
    pub type ImDrawListFlags = ::std::os::raw::c_int;
    pub type ImFontAtlasFlags = ::std::os::raw::c_int;
    pub type ImU32 = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImVec2 {
        pub x: f32,
        pub y: f32,
    }
    #[test]
    fn bindgen_test_layout_ImVec2() {
        assert_eq!(
            ::std::mem::size_of::<ImVec2>(),
            8usize,
            concat!("Size of: ", stringify!(ImVec2))
        );
        assert_eq!(
            ::std::mem::align_of::<ImVec2>(),
            4usize,
            concat!("Alignment of ", stringify!(ImVec2))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImVec2>())).x as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImVec2>())).y as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImVec2C1Ev"]
        pub fn ImVec2_ImVec2(this: *mut root::ImVec2);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImVec2C1Eff"]
        pub fn ImVec2_ImVec21(this: *mut root::ImVec2, _x: f32, _y: f32);
    }
    impl ImVec2 {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImVec2_ImVec2(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn new1(_x: f32, _y: f32) -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImVec2_ImVec21(__bindgen_tmp.as_mut_ptr(), _x, _y);
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImVec4 {
        pub x: f32,
        pub y: f32,
        pub z: f32,
        pub w: f32,
    }
    #[test]
    fn bindgen_test_layout_ImVec4() {
        assert_eq!(
            ::std::mem::size_of::<ImVec4>(),
            16usize,
            concat!("Size of: ", stringify!(ImVec4))
        );
        assert_eq!(
            ::std::mem::align_of::<ImVec4>(),
            4usize,
            concat!("Alignment of ", stringify!(ImVec4))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImVec4>())).x as *const _ as usize },
            0usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImVec4>())).y as *const _ as usize },
            4usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImVec4>())).z as *const _ as usize },
            8usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImVec4>())).w as *const _ as usize },
            12usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImVec4C1Ev"]
        pub fn ImVec4_ImVec4(this: *mut root::ImVec4);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImVec4C1Effff"]
        pub fn ImVec4_ImVec41(this: *mut root::ImVec4, _x: f32, _y: f32, _z: f32, _w: f32);
    }
    impl ImVec4 {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImVec4_ImVec4(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn new1(_x: f32, _y: f32, _z: f32, _w: f32) -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImVec4_ImVec41(__bindgen_tmp.as_mut_ptr(), _x, _y, _z, _w);
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImVector<T> {
        pub Size: ::std::os::raw::c_int,
        pub Capacity: ::std::os::raw::c_int,
        pub Data: *mut T,
        pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
    }
    pub type ImVector_value_type<T> = T;
    pub type ImVector_iterator<T> = *mut root::ImVector_value_type<T>;
    pub type ImVector_const_iterator<T> = *const root::ImVector_value_type<T>;
    pub type ImDrawCallback = ::std::option::Option<
        unsafe extern "C" fn(parent_list: *const root::ImDrawList, cmd: *const root::ImDrawCmd),
    >;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImDrawCmd {
        pub ElemCount: ::std::os::raw::c_uint,
        pub ClipRect: root::ImVec4,
        pub TextureId: root::ImTextureID,
        pub VtxOffset: ::std::os::raw::c_uint,
        pub IdxOffset: ::std::os::raw::c_uint,
        pub UserCallback: root::ImDrawCallback,
        pub UserCallbackData: *mut ::std::os::raw::c_void,
    }
    #[test]
    fn bindgen_test_layout_ImDrawCmd() {
        assert_eq!(
            ::std::mem::size_of::<ImDrawCmd>(),
            56usize,
            concat!("Size of: ", stringify!(ImDrawCmd))
        );
        assert_eq!(
            ::std::mem::align_of::<ImDrawCmd>(),
            8usize,
            concat!("Alignment of ", stringify!(ImDrawCmd))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ElemCount as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(ElemCount)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).ClipRect as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(ClipRect)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).TextureId as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(TextureId)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).VtxOffset as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(VtxOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).IdxOffset as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(IdxOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallback as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(UserCallback)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawCmd>())).UserCallbackData as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(UserCallbackData)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN9ImDrawCmdC1Ev"]
        pub fn ImDrawCmd_ImDrawCmd(this: *mut root::ImDrawCmd);
    }
    impl ImDrawCmd {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImDrawCmd_ImDrawCmd(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
    pub type ImDrawIdx = ::std::os::raw::c_ushort;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImDrawVert {
        pub pos: root::ImVec2,
        pub uv: root::ImVec2,
        pub col: root::ImU32,
    }
    #[test]
    fn bindgen_test_layout_ImDrawVert() {
        assert_eq!(
            ::std::mem::size_of::<ImDrawVert>(),
            20usize,
            concat!("Size of: ", stringify!(ImDrawVert))
        );
        assert_eq!(
            ::std::mem::align_of::<ImDrawVert>(),
            4usize,
            concat!("Alignment of ", stringify!(ImDrawVert))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawVert>())).pos as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawVert),
                "::",
                stringify!(pos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawVert>())).uv as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawVert),
                "::",
                stringify!(uv)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawVert>())).col as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawVert),
                "::",
                stringify!(col)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImDrawChannel {
        pub _CmdBuffer: root::ImVector<root::ImDrawCmd>,
        pub _IdxBuffer: root::ImVector<root::ImDrawIdx>,
    }
    #[test]
    fn bindgen_test_layout_ImDrawChannel() {
        assert_eq!(
            ::std::mem::size_of::<ImDrawChannel>(),
            32usize,
            concat!("Size of: ", stringify!(ImDrawChannel))
        );
        assert_eq!(
            ::std::mem::align_of::<ImDrawChannel>(),
            8usize,
            concat!("Alignment of ", stringify!(ImDrawChannel))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._CmdBuffer as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawChannel),
                "::",
                stringify!(_CmdBuffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawChannel>()))._IdxBuffer as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawChannel),
                "::",
                stringify!(_IdxBuffer)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImDrawListSplitter {
        pub _Current: ::std::os::raw::c_int,
        pub _Count: ::std::os::raw::c_int,
        pub _Channels: root::ImVector<root::ImDrawChannel>,
    }
    #[test]
    fn bindgen_test_layout_ImDrawListSplitter() {
        assert_eq!(
            ::std::mem::size_of::<ImDrawListSplitter>(),
            24usize,
            concat!("Size of: ", stringify!(ImDrawListSplitter))
        );
        assert_eq!(
            ::std::mem::align_of::<ImDrawListSplitter>(),
            8usize,
            concat!("Alignment of ", stringify!(ImDrawListSplitter))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Current as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSplitter),
                "::",
                stringify!(_Current)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawListSplitter>()))._Count as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSplitter),
                "::",
                stringify!(_Count)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImDrawListSplitter>()))._Channels as *const _ as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSplitter),
                "::",
                stringify!(_Channels)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitter5ClearEv"]
        pub fn ImDrawListSplitter_Clear(this: *mut root::ImDrawListSplitter);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitter15ClearFreeMemoryEv"]
        pub fn ImDrawListSplitter_ClearFreeMemory(this: *mut root::ImDrawListSplitter);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitter5SplitEP10ImDrawListi"]
        pub fn ImDrawListSplitter_Split(
            this: *mut root::ImDrawListSplitter,
            draw_list: *mut root::ImDrawList,
            count: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitter5MergeEP10ImDrawList"]
        pub fn ImDrawListSplitter_Merge(
            this: *mut root::ImDrawListSplitter,
            draw_list: *mut root::ImDrawList,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitter17SetCurrentChannelEP10ImDrawListi"]
        pub fn ImDrawListSplitter_SetCurrentChannel(
            this: *mut root::ImDrawListSplitter,
            draw_list: *mut root::ImDrawList,
            channel_idx: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitterC1Ev"]
        pub fn ImDrawListSplitter_ImDrawListSplitter(this: *mut root::ImDrawListSplitter);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN18ImDrawListSplitterD1Ev"]
        pub fn ImDrawListSplitter_ImDrawListSplitter_destructor(
            this: *mut root::ImDrawListSplitter,
        );
    }
    impl ImDrawListSplitter {
        #[inline]
        pub unsafe fn Clear(&mut self) {
            ImDrawListSplitter_Clear(self)
        }
        #[inline]
        pub unsafe fn ClearFreeMemory(&mut self) {
            ImDrawListSplitter_ClearFreeMemory(self)
        }
        #[inline]
        pub unsafe fn Split(
            &mut self,
            draw_list: *mut root::ImDrawList,
            count: ::std::os::raw::c_int,
        ) {
            ImDrawListSplitter_Split(self, draw_list, count)
        }
        #[inline]
        pub unsafe fn Merge(&mut self, draw_list: *mut root::ImDrawList) {
            ImDrawListSplitter_Merge(self, draw_list)
        }
        #[inline]
        pub unsafe fn SetCurrentChannel(
            &mut self,
            draw_list: *mut root::ImDrawList,
            channel_idx: ::std::os::raw::c_int,
        ) {
            ImDrawListSplitter_SetCurrentChannel(self, draw_list, channel_idx)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImDrawListSplitter_ImDrawListSplitter(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ImDrawListSplitter_ImDrawListSplitter_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImDrawList {
        pub CmdBuffer: root::ImVector<root::ImDrawCmd>,
        pub IdxBuffer: root::ImVector<root::ImDrawIdx>,
        pub VtxBuffer: root::ImVector<root::ImDrawVert>,
        pub Flags: root::ImDrawListFlags,
        pub _Data: *const root::ImDrawListSharedData,
        pub _OwnerName: *const ::std::os::raw::c_char,
        pub _VtxCurrentOffset: ::std::os::raw::c_uint,
        pub _VtxCurrentIdx: ::std::os::raw::c_uint,
        pub _VtxWritePtr: *mut root::ImDrawVert,
        pub _IdxWritePtr: *mut root::ImDrawIdx,
        pub _ClipRectStack: root::ImVector<root::ImVec4>,
        pub _TextureIdStack: root::ImVector<root::ImTextureID>,
        pub _Path: root::ImVector<root::ImVec2>,
        pub _Splitter: root::ImDrawListSplitter,
    }
    #[test]
    fn bindgen_test_layout_ImDrawList() {
        assert_eq!(
            ::std::mem::size_of::<ImDrawList>(),
            168usize,
            concat!("Size of: ", stringify!(ImDrawList))
        );
        assert_eq!(
            ::std::mem::align_of::<ImDrawList>(),
            8usize,
            concat!("Alignment of ", stringify!(ImDrawList))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>())).CmdBuffer as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(CmdBuffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>())).IdxBuffer as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(IdxBuffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>())).VtxBuffer as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(VtxBuffer)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>())).Flags as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(Flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Data as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_Data)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._OwnerName as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_OwnerName)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImDrawList>()))._VtxCurrentOffset as *const _ as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_VtxCurrentOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxCurrentIdx as *const _ as usize },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_VtxCurrentIdx)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._VtxWritePtr as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_VtxWritePtr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._IdxWritePtr as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_IdxWritePtr)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._ClipRectStack as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_ClipRectStack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._TextureIdStack as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_TextureIdStack)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Path as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_Path)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawList>()))._Splitter as *const _ as usize },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_Splitter)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList12PushClipRectE6ImVec2S0_b"]
        pub fn ImDrawList_PushClipRect(
            this: *mut root::ImDrawList,
            clip_rect_min: root::ImVec2,
            clip_rect_max: root::ImVec2,
            intersect_with_current_clip_rect: bool,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList22PushClipRectFullScreenEv"]
        pub fn ImDrawList_PushClipRectFullScreen(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList11PopClipRectEv"]
        pub fn ImDrawList_PopClipRect(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList13PushTextureIDEPv"]
        pub fn ImDrawList_PushTextureID(this: *mut root::ImDrawList, texture_id: root::ImTextureID);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList12PopTextureIDEv"]
        pub fn ImDrawList_PopTextureID(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK10ImDrawList14GetClipRectMinEv"]
        pub fn ImDrawList_GetClipRectMin(this: *const root::ImDrawList) -> root::ImVec2;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK10ImDrawList14GetClipRectMaxEv"]
        pub fn ImDrawList_GetClipRectMax(this: *const root::ImDrawList) -> root::ImVec2;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList7AddLineERK6ImVec2S2_jf"]
        pub fn ImDrawList_AddLine(
            this: *mut root::ImDrawList,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList7AddRectERK6ImVec2S2_jfif"]
        pub fn ImDrawList_AddRect(
            this: *mut root::ImDrawList,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            col: root::ImU32,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi"]
        pub fn ImDrawList_AddRectFilled(
            this: *mut root::ImDrawList,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            col: root::ImU32,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj"]
        pub fn ImDrawList_AddRectFilledMultiColor(
            this: *mut root::ImDrawList,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            col_upr_left: root::ImU32,
            col_upr_right: root::ImU32,
            col_bot_right: root::ImU32,
            col_bot_left: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf"]
        pub fn ImDrawList_AddQuad(
            this: *mut root::ImDrawList,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            p4: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j"]
        pub fn ImDrawList_AddQuadFilled(
            this: *mut root::ImDrawList,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            p4: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf"]
        pub fn ImDrawList_AddTriangle(
            this: *mut root::ImDrawList,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j"]
        pub fn ImDrawList_AddTriangleFilled(
            this: *mut root::ImDrawList,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList9AddCircleERK6ImVec2fjif"]
        pub fn ImDrawList_AddCircle(
            this: *mut root::ImDrawList,
            center: *const root::ImVec2,
            radius: f32,
            col: root::ImU32,
            num_segments: ::std::os::raw::c_int,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList15AddCircleFilledERK6ImVec2fji"]
        pub fn ImDrawList_AddCircleFilled(
            this: *mut root::ImDrawList,
            center: *const root::ImVec2,
            radius: f32,
            col: root::ImU32,
            num_segments: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_"]
        pub fn ImDrawList_AddText(
            this: *mut root::ImDrawList,
            pos: *const root::ImVec2,
            col: root::ImU32,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4"]
        pub fn ImDrawList_AddText1(
            this: *mut root::ImDrawList,
            font: *const root::ImFont,
            font_size: f32,
            pos: *const root::ImVec2,
            col: root::ImU32,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            wrap_width: f32,
            cpu_fine_clip_rect: *const root::ImVec4,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList11AddPolylineEPK6ImVec2ijbf"]
        pub fn ImDrawList_AddPolyline(
            this: *mut root::ImDrawList,
            points: *const root::ImVec2,
            num_points: ::std::os::raw::c_int,
            col: root::ImU32,
            closed: bool,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij"]
        pub fn ImDrawList_AddConvexPolyFilled(
            this: *mut root::ImDrawList,
            points: *const root::ImVec2,
            num_points: ::std::os::raw::c_int,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList14AddBezierCurveERK6ImVec2S2_S2_S2_jfi"]
        pub fn ImDrawList_AddBezierCurve(
            this: *mut root::ImDrawList,
            pos0: *const root::ImVec2,
            cp0: *const root::ImVec2,
            cp1: *const root::ImVec2,
            pos1: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
            num_segments: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j"]
        pub fn ImDrawList_AddImage(
            this: *mut root::ImDrawList,
            user_texture_id: root::ImTextureID,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            uv_min: *const root::ImVec2,
            uv_max: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList12AddImageQuadEPvRK6ImVec2S3_S3_S3_S3_S3_S3_S3_j"]
        pub fn ImDrawList_AddImageQuad(
            this: *mut root::ImDrawList,
            user_texture_id: root::ImTextureID,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            p4: *const root::ImVec2,
            uv1: *const root::ImVec2,
            uv2: *const root::ImVec2,
            uv3: *const root::ImVec2,
            uv4: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList15AddImageRoundedEPvRK6ImVec2S3_S3_S3_jfi"]
        pub fn ImDrawList_AddImageRounded(
            this: *mut root::ImDrawList,
            user_texture_id: root::ImTextureID,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            uv_min: *const root::ImVec2,
            uv_max: *const root::ImVec2,
            col: root::ImU32,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList9PathClearEv"]
        pub fn ImDrawList_PathClear(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList10PathLineToERK6ImVec2"]
        pub fn ImDrawList_PathLineTo(this: *mut root::ImDrawList, pos: *const root::ImVec2);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList24PathLineToMergeDuplicateERK6ImVec2"]
        pub fn ImDrawList_PathLineToMergeDuplicate(
            this: *mut root::ImDrawList,
            pos: *const root::ImVec2,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList14PathFillConvexEj"]
        pub fn ImDrawList_PathFillConvex(this: *mut root::ImDrawList, col: root::ImU32);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList10PathStrokeEjbf"]
        pub fn ImDrawList_PathStroke(
            this: *mut root::ImDrawList,
            col: root::ImU32,
            closed: bool,
            thickness: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList9PathArcToERK6ImVec2fffi"]
        pub fn ImDrawList_PathArcTo(
            this: *mut root::ImDrawList,
            center: *const root::ImVec2,
            radius: f32,
            a_min: f32,
            a_max: f32,
            num_segments: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList13PathArcToFastERK6ImVec2fii"]
        pub fn ImDrawList_PathArcToFast(
            this: *mut root::ImDrawList,
            center: *const root::ImVec2,
            radius: f32,
            a_min_of_12: ::std::os::raw::c_int,
            a_max_of_12: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList17PathBezierCurveToERK6ImVec2S2_S2_i"]
        pub fn ImDrawList_PathBezierCurveTo(
            this: *mut root::ImDrawList,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            num_segments: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList8PathRectERK6ImVec2S2_fi"]
        pub fn ImDrawList_PathRect(
            this: *mut root::ImDrawList,
            rect_min: *const root::ImVec2,
            rect_max: *const root::ImVec2,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPv"]
        pub fn ImDrawList_AddCallback(
            this: *mut root::ImDrawList,
            callback: root::ImDrawCallback,
            callback_data: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList10AddDrawCmdEv"]
        pub fn ImDrawList_AddDrawCmd(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK10ImDrawList11CloneOutputEv"]
        pub fn ImDrawList_CloneOutput(this: *const root::ImDrawList) -> *mut root::ImDrawList;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList13ChannelsSplitEi"]
        pub fn ImDrawList_ChannelsSplit(this: *mut root::ImDrawList, count: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList13ChannelsMergeEv"]
        pub fn ImDrawList_ChannelsMerge(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList18ChannelsSetCurrentEi"]
        pub fn ImDrawList_ChannelsSetCurrent(this: *mut root::ImDrawList, n: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList5ClearEv"]
        pub fn ImDrawList_Clear(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList15ClearFreeMemoryEv"]
        pub fn ImDrawList_ClearFreeMemory(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList11PrimReserveEii"]
        pub fn ImDrawList_PrimReserve(
            this: *mut root::ImDrawList,
            idx_count: ::std::os::raw::c_int,
            vtx_count: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList8PrimRectERK6ImVec2S2_j"]
        pub fn ImDrawList_PrimRect(
            this: *mut root::ImDrawList,
            a: *const root::ImVec2,
            b: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j"]
        pub fn ImDrawList_PrimRectUV(
            this: *mut root::ImDrawList,
            a: *const root::ImVec2,
            b: *const root::ImVec2,
            uv_a: *const root::ImVec2,
            uv_b: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j"]
        pub fn ImDrawList_PrimQuadUV(
            this: *mut root::ImDrawList,
            a: *const root::ImVec2,
            b: *const root::ImVec2,
            c: *const root::ImVec2,
            d: *const root::ImVec2,
            uv_a: *const root::ImVec2,
            uv_b: *const root::ImVec2,
            uv_c: *const root::ImVec2,
            uv_d: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList12PrimWriteVtxERK6ImVec2S2_j"]
        pub fn ImDrawList_PrimWriteVtx(
            this: *mut root::ImDrawList,
            pos: *const root::ImVec2,
            uv: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList12PrimWriteIdxEt"]
        pub fn ImDrawList_PrimWriteIdx(this: *mut root::ImDrawList, idx: root::ImDrawIdx);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList7PrimVtxERK6ImVec2S2_j"]
        pub fn ImDrawList_PrimVtx(
            this: *mut root::ImDrawList,
            pos: *const root::ImVec2,
            uv: *const root::ImVec2,
            col: root::ImU32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList14UpdateClipRectEv"]
        pub fn ImDrawList_UpdateClipRect(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawList15UpdateTextureIDEv"]
        pub fn ImDrawList_UpdateTextureID(this: *mut root::ImDrawList);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawListC1EPK20ImDrawListSharedData"]
        pub fn ImDrawList_ImDrawList(
            this: *mut root::ImDrawList,
            shared_data: *const root::ImDrawListSharedData,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawListD1Ev"]
        pub fn ImDrawList_ImDrawList_destructor(this: *mut root::ImDrawList);
    }
    impl ImDrawList {
        #[inline]
        pub unsafe fn PushClipRect(
            &mut self,
            clip_rect_min: root::ImVec2,
            clip_rect_max: root::ImVec2,
            intersect_with_current_clip_rect: bool,
        ) {
            ImDrawList_PushClipRect(
                self,
                clip_rect_min,
                clip_rect_max,
                intersect_with_current_clip_rect,
            )
        }
        #[inline]
        pub unsafe fn PushClipRectFullScreen(&mut self) {
            ImDrawList_PushClipRectFullScreen(self)
        }
        #[inline]
        pub unsafe fn PopClipRect(&mut self) {
            ImDrawList_PopClipRect(self)
        }
        #[inline]
        pub unsafe fn PushTextureID(&mut self, texture_id: root::ImTextureID) {
            ImDrawList_PushTextureID(self, texture_id)
        }
        #[inline]
        pub unsafe fn PopTextureID(&mut self) {
            ImDrawList_PopTextureID(self)
        }
        #[inline]
        pub unsafe fn GetClipRectMin(&self) -> root::ImVec2 {
            ImDrawList_GetClipRectMin(self)
        }
        #[inline]
        pub unsafe fn GetClipRectMax(&self) -> root::ImVec2 {
            ImDrawList_GetClipRectMax(self)
        }
        #[inline]
        pub unsafe fn AddLine(
            &mut self,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
        ) {
            ImDrawList_AddLine(self, p1, p2, col, thickness)
        }
        #[inline]
        pub unsafe fn AddRect(
            &mut self,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            col: root::ImU32,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
            thickness: f32,
        ) {
            ImDrawList_AddRect(
                self,
                p_min,
                p_max,
                col,
                rounding,
                rounding_corners,
                thickness,
            )
        }
        #[inline]
        pub unsafe fn AddRectFilled(
            &mut self,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            col: root::ImU32,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
        ) {
            ImDrawList_AddRectFilled(self, p_min, p_max, col, rounding, rounding_corners)
        }
        #[inline]
        pub unsafe fn AddRectFilledMultiColor(
            &mut self,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            col_upr_left: root::ImU32,
            col_upr_right: root::ImU32,
            col_bot_right: root::ImU32,
            col_bot_left: root::ImU32,
        ) {
            ImDrawList_AddRectFilledMultiColor(
                self,
                p_min,
                p_max,
                col_upr_left,
                col_upr_right,
                col_bot_right,
                col_bot_left,
            )
        }
        #[inline]
        pub unsafe fn AddQuad(
            &mut self,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            p4: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
        ) {
            ImDrawList_AddQuad(self, p1, p2, p3, p4, col, thickness)
        }
        #[inline]
        pub unsafe fn AddQuadFilled(
            &mut self,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            p4: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_AddQuadFilled(self, p1, p2, p3, p4, col)
        }
        #[inline]
        pub unsafe fn AddTriangle(
            &mut self,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
        ) {
            ImDrawList_AddTriangle(self, p1, p2, p3, col, thickness)
        }
        #[inline]
        pub unsafe fn AddTriangleFilled(
            &mut self,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_AddTriangleFilled(self, p1, p2, p3, col)
        }
        #[inline]
        pub unsafe fn AddCircle(
            &mut self,
            center: *const root::ImVec2,
            radius: f32,
            col: root::ImU32,
            num_segments: ::std::os::raw::c_int,
            thickness: f32,
        ) {
            ImDrawList_AddCircle(self, center, radius, col, num_segments, thickness)
        }
        #[inline]
        pub unsafe fn AddCircleFilled(
            &mut self,
            center: *const root::ImVec2,
            radius: f32,
            col: root::ImU32,
            num_segments: ::std::os::raw::c_int,
        ) {
            ImDrawList_AddCircleFilled(self, center, radius, col, num_segments)
        }
        #[inline]
        pub unsafe fn AddText(
            &mut self,
            pos: *const root::ImVec2,
            col: root::ImU32,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
        ) {
            ImDrawList_AddText(self, pos, col, text_begin, text_end)
        }
        #[inline]
        pub unsafe fn AddText1(
            &mut self,
            font: *const root::ImFont,
            font_size: f32,
            pos: *const root::ImVec2,
            col: root::ImU32,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            wrap_width: f32,
            cpu_fine_clip_rect: *const root::ImVec4,
        ) {
            ImDrawList_AddText1(
                self,
                font,
                font_size,
                pos,
                col,
                text_begin,
                text_end,
                wrap_width,
                cpu_fine_clip_rect,
            )
        }
        #[inline]
        pub unsafe fn AddPolyline(
            &mut self,
            points: *const root::ImVec2,
            num_points: ::std::os::raw::c_int,
            col: root::ImU32,
            closed: bool,
            thickness: f32,
        ) {
            ImDrawList_AddPolyline(self, points, num_points, col, closed, thickness)
        }
        #[inline]
        pub unsafe fn AddConvexPolyFilled(
            &mut self,
            points: *const root::ImVec2,
            num_points: ::std::os::raw::c_int,
            col: root::ImU32,
        ) {
            ImDrawList_AddConvexPolyFilled(self, points, num_points, col)
        }
        #[inline]
        pub unsafe fn AddBezierCurve(
            &mut self,
            pos0: *const root::ImVec2,
            cp0: *const root::ImVec2,
            cp1: *const root::ImVec2,
            pos1: *const root::ImVec2,
            col: root::ImU32,
            thickness: f32,
            num_segments: ::std::os::raw::c_int,
        ) {
            ImDrawList_AddBezierCurve(self, pos0, cp0, cp1, pos1, col, thickness, num_segments)
        }
        #[inline]
        pub unsafe fn AddImage(
            &mut self,
            user_texture_id: root::ImTextureID,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            uv_min: *const root::ImVec2,
            uv_max: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_AddImage(self, user_texture_id, p_min, p_max, uv_min, uv_max, col)
        }
        #[inline]
        pub unsafe fn AddImageQuad(
            &mut self,
            user_texture_id: root::ImTextureID,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            p4: *const root::ImVec2,
            uv1: *const root::ImVec2,
            uv2: *const root::ImVec2,
            uv3: *const root::ImVec2,
            uv4: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_AddImageQuad(
                self,
                user_texture_id,
                p1,
                p2,
                p3,
                p4,
                uv1,
                uv2,
                uv3,
                uv4,
                col,
            )
        }
        #[inline]
        pub unsafe fn AddImageRounded(
            &mut self,
            user_texture_id: root::ImTextureID,
            p_min: *const root::ImVec2,
            p_max: *const root::ImVec2,
            uv_min: *const root::ImVec2,
            uv_max: *const root::ImVec2,
            col: root::ImU32,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
        ) {
            ImDrawList_AddImageRounded(
                self,
                user_texture_id,
                p_min,
                p_max,
                uv_min,
                uv_max,
                col,
                rounding,
                rounding_corners,
            )
        }
        #[inline]
        pub unsafe fn PathClear(&mut self) {
            ImDrawList_PathClear(self)
        }
        #[inline]
        pub unsafe fn PathLineTo(&mut self, pos: *const root::ImVec2) {
            ImDrawList_PathLineTo(self, pos)
        }
        #[inline]
        pub unsafe fn PathLineToMergeDuplicate(&mut self, pos: *const root::ImVec2) {
            ImDrawList_PathLineToMergeDuplicate(self, pos)
        }
        #[inline]
        pub unsafe fn PathFillConvex(&mut self, col: root::ImU32) {
            ImDrawList_PathFillConvex(self, col)
        }
        #[inline]
        pub unsafe fn PathStroke(&mut self, col: root::ImU32, closed: bool, thickness: f32) {
            ImDrawList_PathStroke(self, col, closed, thickness)
        }
        #[inline]
        pub unsafe fn PathArcTo(
            &mut self,
            center: *const root::ImVec2,
            radius: f32,
            a_min: f32,
            a_max: f32,
            num_segments: ::std::os::raw::c_int,
        ) {
            ImDrawList_PathArcTo(self, center, radius, a_min, a_max, num_segments)
        }
        #[inline]
        pub unsafe fn PathArcToFast(
            &mut self,
            center: *const root::ImVec2,
            radius: f32,
            a_min_of_12: ::std::os::raw::c_int,
            a_max_of_12: ::std::os::raw::c_int,
        ) {
            ImDrawList_PathArcToFast(self, center, radius, a_min_of_12, a_max_of_12)
        }
        #[inline]
        pub unsafe fn PathBezierCurveTo(
            &mut self,
            p1: *const root::ImVec2,
            p2: *const root::ImVec2,
            p3: *const root::ImVec2,
            num_segments: ::std::os::raw::c_int,
        ) {
            ImDrawList_PathBezierCurveTo(self, p1, p2, p3, num_segments)
        }
        #[inline]
        pub unsafe fn PathRect(
            &mut self,
            rect_min: *const root::ImVec2,
            rect_max: *const root::ImVec2,
            rounding: f32,
            rounding_corners: root::ImDrawCornerFlags,
        ) {
            ImDrawList_PathRect(self, rect_min, rect_max, rounding, rounding_corners)
        }
        #[inline]
        pub unsafe fn AddCallback(
            &mut self,
            callback: root::ImDrawCallback,
            callback_data: *mut ::std::os::raw::c_void,
        ) {
            ImDrawList_AddCallback(self, callback, callback_data)
        }
        #[inline]
        pub unsafe fn AddDrawCmd(&mut self) {
            ImDrawList_AddDrawCmd(self)
        }
        #[inline]
        pub unsafe fn CloneOutput(&self) -> *mut root::ImDrawList {
            ImDrawList_CloneOutput(self)
        }
        #[inline]
        pub unsafe fn ChannelsSplit(&mut self, count: ::std::os::raw::c_int) {
            ImDrawList_ChannelsSplit(self, count)
        }
        #[inline]
        pub unsafe fn ChannelsMerge(&mut self) {
            ImDrawList_ChannelsMerge(self)
        }
        #[inline]
        pub unsafe fn ChannelsSetCurrent(&mut self, n: ::std::os::raw::c_int) {
            ImDrawList_ChannelsSetCurrent(self, n)
        }
        #[inline]
        pub unsafe fn Clear(&mut self) {
            ImDrawList_Clear(self)
        }
        #[inline]
        pub unsafe fn ClearFreeMemory(&mut self) {
            ImDrawList_ClearFreeMemory(self)
        }
        #[inline]
        pub unsafe fn PrimReserve(
            &mut self,
            idx_count: ::std::os::raw::c_int,
            vtx_count: ::std::os::raw::c_int,
        ) {
            ImDrawList_PrimReserve(self, idx_count, vtx_count)
        }
        #[inline]
        pub unsafe fn PrimRect(
            &mut self,
            a: *const root::ImVec2,
            b: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_PrimRect(self, a, b, col)
        }
        #[inline]
        pub unsafe fn PrimRectUV(
            &mut self,
            a: *const root::ImVec2,
            b: *const root::ImVec2,
            uv_a: *const root::ImVec2,
            uv_b: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_PrimRectUV(self, a, b, uv_a, uv_b, col)
        }
        #[inline]
        pub unsafe fn PrimQuadUV(
            &mut self,
            a: *const root::ImVec2,
            b: *const root::ImVec2,
            c: *const root::ImVec2,
            d: *const root::ImVec2,
            uv_a: *const root::ImVec2,
            uv_b: *const root::ImVec2,
            uv_c: *const root::ImVec2,
            uv_d: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_PrimQuadUV(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col)
        }
        #[inline]
        pub unsafe fn PrimWriteVtx(
            &mut self,
            pos: *const root::ImVec2,
            uv: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_PrimWriteVtx(self, pos, uv, col)
        }
        #[inline]
        pub unsafe fn PrimWriteIdx(&mut self, idx: root::ImDrawIdx) {
            ImDrawList_PrimWriteIdx(self, idx)
        }
        #[inline]
        pub unsafe fn PrimVtx(
            &mut self,
            pos: *const root::ImVec2,
            uv: *const root::ImVec2,
            col: root::ImU32,
        ) {
            ImDrawList_PrimVtx(self, pos, uv, col)
        }
        #[inline]
        pub unsafe fn UpdateClipRect(&mut self) {
            ImDrawList_UpdateClipRect(self)
        }
        #[inline]
        pub unsafe fn UpdateTextureID(&mut self) {
            ImDrawList_UpdateTextureID(self)
        }
        #[inline]
        pub unsafe fn new(shared_data: *const root::ImDrawListSharedData) -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImDrawList_ImDrawList(__bindgen_tmp.as_mut_ptr(), shared_data);
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ImDrawList_ImDrawList_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImDrawData {
        pub Valid: bool,
        pub CmdLists: *mut *mut root::ImDrawList,
        pub CmdListsCount: ::std::os::raw::c_int,
        pub TotalIdxCount: ::std::os::raw::c_int,
        pub TotalVtxCount: ::std::os::raw::c_int,
        pub DisplayPos: root::ImVec2,
        pub DisplaySize: root::ImVec2,
        pub FramebufferScale: root::ImVec2,
    }
    #[test]
    fn bindgen_test_layout_ImDrawData() {
        assert_eq!(
            ::std::mem::size_of::<ImDrawData>(),
            56usize,
            concat!("Size of: ", stringify!(ImDrawData))
        );
        assert_eq!(
            ::std::mem::align_of::<ImDrawData>(),
            8usize,
            concat!("Alignment of ", stringify!(ImDrawData))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).Valid as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(Valid)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdLists as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(CmdLists)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).CmdListsCount as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(CmdListsCount)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalIdxCount as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(TotalIdxCount)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).TotalVtxCount as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(TotalVtxCount)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplayPos as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(DisplayPos)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).DisplaySize as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(DisplaySize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImDrawData>())).FramebufferScale as *const _ as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(FramebufferScale)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawData5ClearEv"]
        pub fn ImDrawData_Clear(this: *mut root::ImDrawData);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawData17DeIndexAllBuffersEv"]
        pub fn ImDrawData_DeIndexAllBuffers(this: *mut root::ImDrawData);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawData14ScaleClipRectsERK6ImVec2"]
        pub fn ImDrawData_ScaleClipRects(
            this: *mut root::ImDrawData,
            fb_scale: *const root::ImVec2,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawDataC1Ev"]
        pub fn ImDrawData_ImDrawData(this: *mut root::ImDrawData);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN10ImDrawDataD1Ev"]
        pub fn ImDrawData_ImDrawData_destructor(this: *mut root::ImDrawData);
    }
    impl ImDrawData {
        #[inline]
        pub unsafe fn Clear(&mut self) {
            ImDrawData_Clear(self)
        }
        #[inline]
        pub unsafe fn DeIndexAllBuffers(&mut self) {
            ImDrawData_DeIndexAllBuffers(self)
        }
        #[inline]
        pub unsafe fn ScaleClipRects(&mut self, fb_scale: *const root::ImVec2) {
            ImDrawData_ScaleClipRects(self, fb_scale)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImDrawData_ImDrawData(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ImDrawData_ImDrawData_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct ImFontConfig {
        pub FontData: *mut ::std::os::raw::c_void,
        pub FontDataSize: ::std::os::raw::c_int,
        pub FontDataOwnedByAtlas: bool,
        pub FontNo: ::std::os::raw::c_int,
        pub SizePixels: f32,
        pub OversampleH: ::std::os::raw::c_int,
        pub OversampleV: ::std::os::raw::c_int,
        pub PixelSnapH: bool,
        pub GlyphExtraSpacing: root::ImVec2,
        pub GlyphOffset: root::ImVec2,
        pub GlyphRanges: *const root::ImWchar,
        pub GlyphMinAdvanceX: f32,
        pub GlyphMaxAdvanceX: f32,
        pub MergeMode: bool,
        pub RasterizerFlags: ::std::os::raw::c_uint,
        pub RasterizerMultiply: f32,
        pub EllipsisChar: root::ImWchar,
        pub Name: [::std::os::raw::c_char; 40usize],
        pub DstFont: *mut root::ImFont,
    }
    #[test]
    fn bindgen_test_layout_ImFontConfig() {
        assert_eq!(
            ::std::mem::size_of::<ImFontConfig>(),
            136usize,
            concat!("Size of: ", stringify!(ImFontConfig))
        );
        assert_eq!(
            ::std::mem::align_of::<ImFontConfig>(),
            8usize,
            concat!("Alignment of ", stringify!(ImFontConfig))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontData as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontDataSize as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontDataSize)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontConfig>())).FontDataOwnedByAtlas as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontDataOwnedByAtlas)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).FontNo as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontNo)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).SizePixels as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(SizePixels)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleH as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(OversampleH)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).OversampleV as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(OversampleV)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).PixelSnapH as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(PixelSnapH)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontConfig>())).GlyphExtraSpacing as *const _ as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphExtraSpacing)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphOffset as *const _ as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).GlyphRanges as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphRanges)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontConfig>())).GlyphMinAdvanceX as *const _ as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphMinAdvanceX)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontConfig>())).GlyphMaxAdvanceX as *const _ as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphMaxAdvanceX)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).MergeMode as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(MergeMode)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontConfig>())).RasterizerFlags as *const _ as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(RasterizerFlags)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontConfig>())).RasterizerMultiply as *const _ as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(RasterizerMultiply)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).EllipsisChar as *const _ as usize },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(EllipsisChar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).Name as *const _ as usize },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(Name)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontConfig>())).DstFont as *const _ as usize },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(DstFont)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN12ImFontConfigC1Ev"]
        pub fn ImFontConfig_ImFontConfig(this: *mut root::ImFontConfig);
    }
    impl ImFontConfig {
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImFontConfig_ImFontConfig(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImFontGlyph {
        pub Codepoint: root::ImWchar,
        pub AdvanceX: f32,
        pub X0: f32,
        pub Y0: f32,
        pub X1: f32,
        pub Y1: f32,
        pub U0: f32,
        pub V0: f32,
        pub U1: f32,
        pub V1: f32,
    }
    #[test]
    fn bindgen_test_layout_ImFontGlyph() {
        assert_eq!(
            ::std::mem::size_of::<ImFontGlyph>(),
            40usize,
            concat!("Size of: ", stringify!(ImFontGlyph))
        );
        assert_eq!(
            ::std::mem::align_of::<ImFontGlyph>(),
            4usize,
            concat!("Alignment of ", stringify!(ImFontGlyph))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Codepoint as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(Codepoint)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).AdvanceX as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(AdvanceX)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X0 as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(X0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y0 as *const _ as usize },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(Y0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).X1 as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(X1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).Y1 as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(Y1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U0 as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(U0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V0 as *const _ as usize },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(V0)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).U1 as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(U1)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontGlyph>())).V1 as *const _ as usize },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(V1)
            )
        );
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImFontGlyphRangesBuilder {
        pub UsedChars: root::ImVector<root::ImU32>,
    }
    #[test]
    fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
        assert_eq!(
            ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
            16usize,
            concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
        );
        assert_eq!(
            ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
            8usize,
            concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontGlyphRangesBuilder>())).UsedChars as *const _ as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyphRangesBuilder),
                "::",
                stringify!(UsedChars)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder5ClearEv"]
        pub fn ImFontGlyphRangesBuilder_Clear(this: *mut root::ImFontGlyphRangesBuilder);
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK24ImFontGlyphRangesBuilder6GetBitEi"]
        pub fn ImFontGlyphRangesBuilder_GetBit(
            this: *const root::ImFontGlyphRangesBuilder,
            n: ::std::os::raw::c_int,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder6SetBitEi"]
        pub fn ImFontGlyphRangesBuilder_SetBit(
            this: *mut root::ImFontGlyphRangesBuilder,
            n: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder7AddCharEt"]
        pub fn ImFontGlyphRangesBuilder_AddChar(
            this: *mut root::ImFontGlyphRangesBuilder,
            c: root::ImWchar,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder7AddTextEPKcS1_"]
        pub fn ImFontGlyphRangesBuilder_AddText(
            this: *mut root::ImFontGlyphRangesBuilder,
            text: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder9AddRangesEPKt"]
        pub fn ImFontGlyphRangesBuilder_AddRanges(
            this: *mut root::ImFontGlyphRangesBuilder,
            ranges: *const root::ImWchar,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilder11BuildRangesEP8ImVectorItE"]
        pub fn ImFontGlyphRangesBuilder_BuildRanges(
            this: *mut root::ImFontGlyphRangesBuilder,
            out_ranges: *mut root::ImVector<root::ImWchar>,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN24ImFontGlyphRangesBuilderC1Ev"]
        pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(
            this: *mut root::ImFontGlyphRangesBuilder,
        );
    }
    impl ImFontGlyphRangesBuilder {
        #[inline]
        pub unsafe fn Clear(&mut self) {
            ImFontGlyphRangesBuilder_Clear(self)
        }
        #[inline]
        pub unsafe fn GetBit(&self, n: ::std::os::raw::c_int) -> bool {
            ImFontGlyphRangesBuilder_GetBit(self, n)
        }
        #[inline]
        pub unsafe fn SetBit(&mut self, n: ::std::os::raw::c_int) {
            ImFontGlyphRangesBuilder_SetBit(self, n)
        }
        #[inline]
        pub unsafe fn AddChar(&mut self, c: root::ImWchar) {
            ImFontGlyphRangesBuilder_AddChar(self, c)
        }
        #[inline]
        pub unsafe fn AddText(
            &mut self,
            text: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
        ) {
            ImFontGlyphRangesBuilder_AddText(self, text, text_end)
        }
        #[inline]
        pub unsafe fn AddRanges(&mut self, ranges: *const root::ImWchar) {
            ImFontGlyphRangesBuilder_AddRanges(self, ranges)
        }
        #[inline]
        pub unsafe fn BuildRanges(&mut self, out_ranges: *mut root::ImVector<root::ImWchar>) {
            ImFontGlyphRangesBuilder_BuildRanges(self, out_ranges)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ImFontAtlasCustomRect {
        pub ID: ::std::os::raw::c_uint,
        pub Width: ::std::os::raw::c_ushort,
        pub Height: ::std::os::raw::c_ushort,
        pub X: ::std::os::raw::c_ushort,
        pub Y: ::std::os::raw::c_ushort,
        pub GlyphAdvanceX: f32,
        pub GlyphOffset: root::ImVec2,
        pub Font: *mut root::ImFont,
    }
    #[test]
    fn bindgen_test_layout_ImFontAtlasCustomRect() {
        assert_eq!(
            ::std::mem::size_of::<ImFontAtlasCustomRect>(),
            32usize,
            concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
        );
        assert_eq!(
            ::std::mem::align_of::<ImFontAtlasCustomRect>(),
            8usize,
            concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).ID as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(ID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Width as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Width)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Height as *const _ as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Height)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).X as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(X)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Y as *const _ as usize },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Y)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphAdvanceX as *const _ as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(GlyphAdvanceX)
            )
        );
        assert_eq!(
            unsafe {
                &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).GlyphOffset as *const _ as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(GlyphOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlasCustomRect>())).Font as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Font)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK21ImFontAtlasCustomRect8IsPackedEv"]
        pub fn ImFontAtlasCustomRect_IsPacked(this: *const root::ImFontAtlasCustomRect) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN21ImFontAtlasCustomRectC1Ev"]
        pub fn ImFontAtlasCustomRect_ImFontAtlasCustomRect(this: *mut root::ImFontAtlasCustomRect);
    }
    impl ImFontAtlasCustomRect {
        #[inline]
        pub unsafe fn IsPacked(&self) -> bool {
            ImFontAtlasCustomRect_IsPacked(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImFontAtlasCustomRect_ImFontAtlasCustomRect(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    pub struct ImFontAtlas {
        pub Locked: bool,
        pub Flags: root::ImFontAtlasFlags,
        pub TexID: root::ImTextureID,
        pub TexDesiredWidth: ::std::os::raw::c_int,
        pub TexGlyphPadding: ::std::os::raw::c_int,
        pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
        pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
        pub TexWidth: ::std::os::raw::c_int,
        pub TexHeight: ::std::os::raw::c_int,
        pub TexUvScale: root::ImVec2,
        pub TexUvWhitePixel: root::ImVec2,
        pub Fonts: root::ImVector<*mut root::ImFont>,
        pub CustomRects: root::ImVector<root::ImFontAtlasCustomRect>,
        pub ConfigData: root::ImVector<root::ImFontConfig>,
        pub CustomRectIds: [::std::os::raw::c_int; 1usize],
    }
    pub type ImFontAtlas_CustomRect = root::ImFontAtlasCustomRect;
    pub type ImFontAtlas_GlyphRangesBuilder = root::ImFontGlyphRangesBuilder;
    #[test]
    fn bindgen_test_layout_ImFontAtlas() {
        assert_eq!(
            ::std::mem::size_of::<ImFontAtlas>(),
            120usize,
            concat!("Size of: ", stringify!(ImFontAtlas))
        );
        assert_eq!(
            ::std::mem::align_of::<ImFontAtlas>(),
            8usize,
            concat!("Alignment of ", stringify!(ImFontAtlas))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Locked as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(Locked)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Flags as *const _ as usize },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(Flags)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexID as *const _ as usize },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexID)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexDesiredWidth as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexDesiredWidth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexGlyphPadding as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexGlyphPadding)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsAlpha8 as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexPixelsAlpha8)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexPixelsRGBA32 as *const _ as usize },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexPixelsRGBA32)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexWidth as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexWidth)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexHeight as *const _ as usize },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexHeight)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvScale as *const _ as usize },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexUvScale)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).TexUvWhitePixel as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexUvWhitePixel)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).Fonts as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(Fonts)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRects as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(CustomRects)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).ConfigData as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(ConfigData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFontAtlas>())).CustomRectIds as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(CustomRectIds)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas7AddFontEPK12ImFontConfig"]
        pub fn ImFontAtlas_AddFont(
            this: *mut root::ImFontAtlas,
            font_cfg: *const root::ImFontConfig,
        ) -> *mut root::ImFont;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig"]
        pub fn ImFontAtlas_AddFontDefault(
            this: *mut root::ImFontAtlas,
            font_cfg: *const root::ImFontConfig,
        ) -> *mut root::ImFont;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt"]
        pub fn ImFontAtlas_AddFontFromFileTTF(
            this: *mut root::ImFontAtlas,
            filename: *const ::std::os::raw::c_char,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt"]
        pub fn ImFontAtlas_AddFontFromMemoryTTF(
            this: *mut root::ImFontAtlas,
            font_data: *mut ::std::os::raw::c_void,
            font_size: ::std::os::raw::c_int,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt"]
        pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
            this: *mut root::ImFontAtlas,
            compressed_font_data: *const ::std::os::raw::c_void,
            compressed_font_size: ::std::os::raw::c_int,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt"]
        pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
            this: *mut root::ImFontAtlas,
            compressed_font_data_base85: *const ::std::os::raw::c_char,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas14ClearInputDataEv"]
        pub fn ImFontAtlas_ClearInputData(this: *mut root::ImFontAtlas);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas12ClearTexDataEv"]
        pub fn ImFontAtlas_ClearTexData(this: *mut root::ImFontAtlas);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas10ClearFontsEv"]
        pub fn ImFontAtlas_ClearFonts(this: *mut root::ImFontAtlas);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas5ClearEv"]
        pub fn ImFontAtlas_Clear(this: *mut root::ImFontAtlas);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas5BuildEv"]
        pub fn ImFontAtlas_Build(this: *mut root::ImFontAtlas) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_"]
        pub fn ImFontAtlas_GetTexDataAsAlpha8(
            this: *mut root::ImFontAtlas,
            out_pixels: *mut *mut ::std::os::raw::c_uchar,
            out_width: *mut ::std::os::raw::c_int,
            out_height: *mut ::std::os::raw::c_int,
            out_bytes_per_pixel: *mut ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_"]
        pub fn ImFontAtlas_GetTexDataAsRGBA32(
            this: *mut root::ImFontAtlas,
            out_pixels: *mut *mut ::std::os::raw::c_uchar,
            out_width: *mut ::std::os::raw::c_int,
            out_height: *mut ::std::os::raw::c_int,
            out_bytes_per_pixel: *mut ::std::os::raw::c_int,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas7IsBuiltEv"]
        pub fn ImFontAtlas_IsBuilt(this: *mut root::ImFontAtlas) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas8SetTexIDEPv"]
        pub fn ImFontAtlas_SetTexID(this: *mut root::ImFontAtlas, id: root::ImTextureID);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas21GetGlyphRangesDefaultEv"]
        pub fn ImFontAtlas_GetGlyphRangesDefault(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas20GetGlyphRangesKoreanEv"]
        pub fn ImFontAtlas_GetGlyphRangesKorean(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas22GetGlyphRangesJapaneseEv"]
        pub fn ImFontAtlas_GetGlyphRangesJapanese(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas25GetGlyphRangesChineseFullEv"]
        pub fn ImFontAtlas_GetGlyphRangesChineseFull(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv"]
        pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas22GetGlyphRangesCyrillicEv"]
        pub fn ImFontAtlas_GetGlyphRangesCyrillic(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas18GetGlyphRangesThaiEv"]
        pub fn ImFontAtlas_GetGlyphRangesThai(this: *mut root::ImFontAtlas)
            -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas24GetGlyphRangesVietnameseEv"]
        pub fn ImFontAtlas_GetGlyphRangesVietnamese(
            this: *mut root::ImFontAtlas,
        ) -> *const root::ImWchar;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas20AddCustomRectRegularEjii"]
        pub fn ImFontAtlas_AddCustomRectRegular(
            this: *mut root::ImFontAtlas,
            id: ::std::os::raw::c_uint,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2"]
        pub fn ImFontAtlas_AddCustomRectFontGlyph(
            this: *mut root::ImFontAtlas,
            font: *mut root::ImFont,
            id: root::ImWchar,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            advance_x: f32,
            offset: *const root::ImVec2,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK11ImFontAtlas20GetCustomRectByIndexEi"]
        pub fn ImFontAtlas_GetCustomRectByIndex(
            this: *const root::ImFontAtlas,
            index: ::std::os::raw::c_int,
        ) -> *const root::ImFontAtlasCustomRect;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas16CalcCustomRectUVEPK21ImFontAtlasCustomRectP6ImVec2S4_"]
        pub fn ImFontAtlas_CalcCustomRectUV(
            this: *mut root::ImFontAtlas,
            rect: *const root::ImFontAtlasCustomRect,
            out_uv_min: *mut root::ImVec2,
            out_uv_max: *mut root::ImVec2,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_"]
        pub fn ImFontAtlas_GetMouseCursorTexData(
            this: *mut root::ImFontAtlas,
            cursor: root::ImGuiMouseCursor,
            out_offset: *mut root::ImVec2,
            out_size: *mut root::ImVec2,
            out_uv_border: *mut root::ImVec2,
            out_uv_fill: *mut root::ImVec2,
        ) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlasC1Ev"]
        pub fn ImFontAtlas_ImFontAtlas(this: *mut root::ImFontAtlas);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN11ImFontAtlasD1Ev"]
        pub fn ImFontAtlas_ImFontAtlas_destructor(this: *mut root::ImFontAtlas);
    }
    impl ImFontAtlas {
        #[inline]
        pub unsafe fn AddFont(&mut self, font_cfg: *const root::ImFontConfig) -> *mut root::ImFont {
            ImFontAtlas_AddFont(self, font_cfg)
        }
        #[inline]
        pub unsafe fn AddFontDefault(
            &mut self,
            font_cfg: *const root::ImFontConfig,
        ) -> *mut root::ImFont {
            ImFontAtlas_AddFontDefault(self, font_cfg)
        }
        #[inline]
        pub unsafe fn AddFontFromFileTTF(
            &mut self,
            filename: *const ::std::os::raw::c_char,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont {
            ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges)
        }
        #[inline]
        pub unsafe fn AddFontFromMemoryTTF(
            &mut self,
            font_data: *mut ::std::os::raw::c_void,
            font_size: ::std::os::raw::c_int,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont {
            ImFontAtlas_AddFontFromMemoryTTF(
                self,
                font_data,
                font_size,
                size_pixels,
                font_cfg,
                glyph_ranges,
            )
        }
        #[inline]
        pub unsafe fn AddFontFromMemoryCompressedTTF(
            &mut self,
            compressed_font_data: *const ::std::os::raw::c_void,
            compressed_font_size: ::std::os::raw::c_int,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont {
            ImFontAtlas_AddFontFromMemoryCompressedTTF(
                self,
                compressed_font_data,
                compressed_font_size,
                size_pixels,
                font_cfg,
                glyph_ranges,
            )
        }
        #[inline]
        pub unsafe fn AddFontFromMemoryCompressedBase85TTF(
            &mut self,
            compressed_font_data_base85: *const ::std::os::raw::c_char,
            size_pixels: f32,
            font_cfg: *const root::ImFontConfig,
            glyph_ranges: *const root::ImWchar,
        ) -> *mut root::ImFont {
            ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
                self,
                compressed_font_data_base85,
                size_pixels,
                font_cfg,
                glyph_ranges,
            )
        }
        #[inline]
        pub unsafe fn ClearInputData(&mut self) {
            ImFontAtlas_ClearInputData(self)
        }
        #[inline]
        pub unsafe fn ClearTexData(&mut self) {
            ImFontAtlas_ClearTexData(self)
        }
        #[inline]
        pub unsafe fn ClearFonts(&mut self) {
            ImFontAtlas_ClearFonts(self)
        }
        #[inline]
        pub unsafe fn Clear(&mut self) {
            ImFontAtlas_Clear(self)
        }
        #[inline]
        pub unsafe fn Build(&mut self) -> bool {
            ImFontAtlas_Build(self)
        }
        #[inline]
        pub unsafe fn GetTexDataAsAlpha8(
            &mut self,
            out_pixels: *mut *mut ::std::os::raw::c_uchar,
            out_width: *mut ::std::os::raw::c_int,
            out_height: *mut ::std::os::raw::c_int,
            out_bytes_per_pixel: *mut ::std::os::raw::c_int,
        ) {
            ImFontAtlas_GetTexDataAsAlpha8(
                self,
                out_pixels,
                out_width,
                out_height,
                out_bytes_per_pixel,
            )
        }
        #[inline]
        pub unsafe fn GetTexDataAsRGBA32(
            &mut self,
            out_pixels: *mut *mut ::std::os::raw::c_uchar,
            out_width: *mut ::std::os::raw::c_int,
            out_height: *mut ::std::os::raw::c_int,
            out_bytes_per_pixel: *mut ::std::os::raw::c_int,
        ) {
            ImFontAtlas_GetTexDataAsRGBA32(
                self,
                out_pixels,
                out_width,
                out_height,
                out_bytes_per_pixel,
            )
        }
        #[inline]
        pub unsafe fn IsBuilt(&mut self) -> bool {
            ImFontAtlas_IsBuilt(self)
        }
        #[inline]
        pub unsafe fn SetTexID(&mut self, id: root::ImTextureID) {
            ImFontAtlas_SetTexID(self, id)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesDefault(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesDefault(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesKorean(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesKorean(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesJapanese(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesJapanese(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesChineseFull(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesChineseFull(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesChineseSimplifiedCommon(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesCyrillic(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesCyrillic(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesThai(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesThai(self)
        }
        #[inline]
        pub unsafe fn GetGlyphRangesVietnamese(&mut self) -> *const root::ImWchar {
            ImFontAtlas_GetGlyphRangesVietnamese(self)
        }
        #[inline]
        pub unsafe fn AddCustomRectRegular(
            &mut self,
            id: ::std::os::raw::c_uint,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int {
            ImFontAtlas_AddCustomRectRegular(self, id, width, height)
        }
        #[inline]
        pub unsafe fn AddCustomRectFontGlyph(
            &mut self,
            font: *mut root::ImFont,
            id: root::ImWchar,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            advance_x: f32,
            offset: *const root::ImVec2,
        ) -> ::std::os::raw::c_int {
            ImFontAtlas_AddCustomRectFontGlyph(self, font, id, width, height, advance_x, offset)
        }
        #[inline]
        pub unsafe fn GetCustomRectByIndex(
            &self,
            index: ::std::os::raw::c_int,
        ) -> *const root::ImFontAtlasCustomRect {
            ImFontAtlas_GetCustomRectByIndex(self, index)
        }
        #[inline]
        pub unsafe fn CalcCustomRectUV(
            &mut self,
            rect: *const root::ImFontAtlasCustomRect,
            out_uv_min: *mut root::ImVec2,
            out_uv_max: *mut root::ImVec2,
        ) {
            ImFontAtlas_CalcCustomRectUV(self, rect, out_uv_min, out_uv_max)
        }
        #[inline]
        pub unsafe fn GetMouseCursorTexData(
            &mut self,
            cursor: root::ImGuiMouseCursor,
            out_offset: *mut root::ImVec2,
            out_size: *mut root::ImVec2,
            out_uv_border: *mut root::ImVec2,
            out_uv_fill: *mut root::ImVec2,
        ) -> bool {
            ImFontAtlas_GetMouseCursorTexData(
                self,
                cursor,
                out_offset,
                out_size,
                out_uv_border,
                out_uv_fill,
            )
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImFontAtlas_ImFontAtlas(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ImFontAtlas_ImFontAtlas_destructor(self)
        }
    }
    #[repr(C)]
    #[derive(Debug)]
    pub struct ImFont {
        pub IndexAdvanceX: root::ImVector<f32>,
        pub FallbackAdvanceX: f32,
        pub FontSize: f32,
        pub IndexLookup: root::ImVector<root::ImWchar>,
        pub Glyphs: root::ImVector<root::ImFontGlyph>,
        pub FallbackGlyph: *const root::ImFontGlyph,
        pub DisplayOffset: root::ImVec2,
        pub ContainerAtlas: *mut root::ImFontAtlas,
        pub ConfigData: *const root::ImFontConfig,
        pub ConfigDataCount: ::std::os::raw::c_short,
        pub FallbackChar: root::ImWchar,
        pub EllipsisChar: root::ImWchar,
        pub Scale: f32,
        pub Ascent: f32,
        pub Descent: f32,
        pub MetricsTotalSurface: ::std::os::raw::c_int,
        pub DirtyLookupTables: bool,
    }
    pub type ImFont_Glyph = root::ImFontGlyph;
    #[test]
    fn bindgen_test_layout_ImFont() {
        assert_eq!(
            ::std::mem::size_of::<ImFont>(),
            120usize,
            concat!("Size of: ", stringify!(ImFont))
        );
        assert_eq!(
            ::std::mem::align_of::<ImFont>(),
            8usize,
            concat!("Alignment of ", stringify!(ImFont))
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).IndexAdvanceX as *const _ as usize },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(IndexAdvanceX)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackAdvanceX as *const _ as usize },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FallbackAdvanceX)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).FontSize as *const _ as usize },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FontSize)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).IndexLookup as *const _ as usize },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(IndexLookup)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).Glyphs as *const _ as usize },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Glyphs)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackGlyph as *const _ as usize },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FallbackGlyph)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).DisplayOffset as *const _ as usize },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(DisplayOffset)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).ContainerAtlas as *const _ as usize },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(ContainerAtlas)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigData as *const _ as usize },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(ConfigData)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).ConfigDataCount as *const _ as usize },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(ConfigDataCount)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).FallbackChar as *const _ as usize },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FallbackChar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).EllipsisChar as *const _ as usize },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(EllipsisChar)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).Scale as *const _ as usize },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Scale)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).Ascent as *const _ as usize },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Ascent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).Descent as *const _ as usize },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Descent)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).MetricsTotalSurface as *const _ as usize },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(MetricsTotalSurface)
            )
        );
        assert_eq!(
            unsafe { &(*(::std::ptr::null::<ImFont>())).DirtyLookupTables as *const _ as usize },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(DirtyLookupTables)
            )
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont9FindGlyphEt"]
        pub fn ImFont_FindGlyph(
            this: *const root::ImFont,
            c: root::ImWchar,
        ) -> *const root::ImFontGlyph;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont19FindGlyphNoFallbackEt"]
        pub fn ImFont_FindGlyphNoFallback(
            this: *const root::ImFont,
            c: root::ImWchar,
        ) -> *const root::ImFontGlyph;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont14GetCharAdvanceEt"]
        pub fn ImFont_GetCharAdvance(this: *const root::ImFont, c: root::ImWchar) -> f32;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont8IsLoadedEv"]
        pub fn ImFont_IsLoaded(this: *const root::ImFont) -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont12GetDebugNameEv"]
        pub fn ImFont_GetDebugName(this: *const root::ImFont) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_"]
        pub fn ImFont_CalcTextSizeA(
            this: *const root::ImFont,
            size: f32,
            max_width: f32,
            wrap_width: f32,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            remaining: *mut *const ::std::os::raw::c_char,
        ) -> root::ImVec2;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f"]
        pub fn ImFont_CalcWordWrapPositionA(
            this: *const root::ImFont,
            scale: f32,
            text: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            wrap_width: f32,
        ) -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont10RenderCharEP10ImDrawListf6ImVec2jt"]
        pub fn ImFont_RenderChar(
            this: *const root::ImFont,
            draw_list: *mut root::ImDrawList,
            size: f32,
            pos: root::ImVec2,
            col: root::ImU32,
            c: root::ImWchar,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZNK6ImFont10RenderTextEP10ImDrawListf6ImVec2jRK6ImVec4PKcS7_fb"]
        pub fn ImFont_RenderText(
            this: *const root::ImFont,
            draw_list: *mut root::ImDrawList,
            size: f32,
            pos: root::ImVec2,
            col: root::ImU32,
            clip_rect: *const root::ImVec4,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            wrap_width: f32,
            cpu_fine_clip: bool,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFont16BuildLookupTableEv"]
        pub fn ImFont_BuildLookupTable(this: *mut root::ImFont);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFont15ClearOutputDataEv"]
        pub fn ImFont_ClearOutputData(this: *mut root::ImFont);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFont9GrowIndexEi"]
        pub fn ImFont_GrowIndex(this: *mut root::ImFont, new_size: ::std::os::raw::c_int);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFont8AddGlyphEtfffffffff"]
        pub fn ImFont_AddGlyph(
            this: *mut root::ImFont,
            c: root::ImWchar,
            x0: f32,
            y0: f32,
            x1: f32,
            y1: f32,
            u0: f32,
            v0: f32,
            u1: f32,
            v1: f32,
            advance_x: f32,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFont12AddRemapCharEttb"]
        pub fn ImFont_AddRemapChar(
            this: *mut root::ImFont,
            dst: root::ImWchar,
            src: root::ImWchar,
            overwrite_dst: bool,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFont15SetFallbackCharEt"]
        pub fn ImFont_SetFallbackChar(this: *mut root::ImFont, c: root::ImWchar);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFontC1Ev"]
        pub fn ImFont_ImFont(this: *mut root::ImFont);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN6ImFontD1Ev"]
        pub fn ImFont_ImFont_destructor(this: *mut root::ImFont);
    }
    impl ImFont {
        #[inline]
        pub unsafe fn FindGlyph(&self, c: root::ImWchar) -> *const root::ImFontGlyph {
            ImFont_FindGlyph(self, c)
        }
        #[inline]
        pub unsafe fn FindGlyphNoFallback(&self, c: root::ImWchar) -> *const root::ImFontGlyph {
            ImFont_FindGlyphNoFallback(self, c)
        }
        #[inline]
        pub unsafe fn GetCharAdvance(&self, c: root::ImWchar) -> f32 {
            ImFont_GetCharAdvance(self, c)
        }
        #[inline]
        pub unsafe fn IsLoaded(&self) -> bool {
            ImFont_IsLoaded(self)
        }
        #[inline]
        pub unsafe fn GetDebugName(&self) -> *const ::std::os::raw::c_char {
            ImFont_GetDebugName(self)
        }
        #[inline]
        pub unsafe fn CalcTextSizeA(
            &self,
            size: f32,
            max_width: f32,
            wrap_width: f32,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            remaining: *mut *const ::std::os::raw::c_char,
        ) -> root::ImVec2 {
            ImFont_CalcTextSizeA(
                self, size, max_width, wrap_width, text_begin, text_end, remaining,
            )
        }
        #[inline]
        pub unsafe fn CalcWordWrapPositionA(
            &self,
            scale: f32,
            text: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            wrap_width: f32,
        ) -> *const ::std::os::raw::c_char {
            ImFont_CalcWordWrapPositionA(self, scale, text, text_end, wrap_width)
        }
        #[inline]
        pub unsafe fn RenderChar(
            &self,
            draw_list: *mut root::ImDrawList,
            size: f32,
            pos: root::ImVec2,
            col: root::ImU32,
            c: root::ImWchar,
        ) {
            ImFont_RenderChar(self, draw_list, size, pos, col, c)
        }
        #[inline]
        pub unsafe fn RenderText(
            &self,
            draw_list: *mut root::ImDrawList,
            size: f32,
            pos: root::ImVec2,
            col: root::ImU32,
            clip_rect: *const root::ImVec4,
            text_begin: *const ::std::os::raw::c_char,
            text_end: *const ::std::os::raw::c_char,
            wrap_width: f32,
            cpu_fine_clip: bool,
        ) {
            ImFont_RenderText(
                self,
                draw_list,
                size,
                pos,
                col,
                clip_rect,
                text_begin,
                text_end,
                wrap_width,
                cpu_fine_clip,
            )
        }
        #[inline]
        pub unsafe fn BuildLookupTable(&mut self) {
            ImFont_BuildLookupTable(self)
        }
        #[inline]
        pub unsafe fn ClearOutputData(&mut self) {
            ImFont_ClearOutputData(self)
        }
        #[inline]
        pub unsafe fn GrowIndex(&mut self, new_size: ::std::os::raw::c_int) {
            ImFont_GrowIndex(self, new_size)
        }
        #[inline]
        pub unsafe fn AddGlyph(
            &mut self,
            c: root::ImWchar,
            x0: f32,
            y0: f32,
            x1: f32,
            y1: f32,
            u0: f32,
            v0: f32,
            u1: f32,
            v1: f32,
            advance_x: f32,
        ) {
            ImFont_AddGlyph(self, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x)
        }
        #[inline]
        pub unsafe fn AddRemapChar(
            &mut self,
            dst: root::ImWchar,
            src: root::ImWchar,
            overwrite_dst: bool,
        ) {
            ImFont_AddRemapChar(self, dst, src, overwrite_dst)
        }
        #[inline]
        pub unsafe fn SetFallbackChar(&mut self, c: root::ImWchar) {
            ImFont_SetFallbackChar(self, c)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ImFont_ImFont(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
        #[inline]
        pub unsafe fn destruct(&mut self) {
            ImFont_ImFont_destructor(self)
        }
    }
    pub mod ImTui {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type TCell = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TScreen {
            pub nx: ::std::os::raw::c_int,
            pub ny: ::std::os::raw::c_int,
            pub nmax: ::std::os::raw::c_int,
            pub data: *mut root::ImTui::TCell,
        }
        #[test]
        fn bindgen_test_layout_TScreen() {
            assert_eq!(
                ::std::mem::size_of::<TScreen>(),
                24usize,
                concat!("Size of: ", stringify!(TScreen))
            );
            assert_eq!(
                ::std::mem::align_of::<TScreen>(),
                8usize,
                concat!("Alignment of ", stringify!(TScreen))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).nx as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(nx)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).ny as *const _ as usize },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(ny)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).nmax as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(nmax)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).data as *const _ as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(data)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK5ImTui7TScreen4sizeEv"]
            pub fn TScreen_size(this: *const root::ImTui::TScreen) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN5ImTui7TScreen5clearEv"]
            pub fn TScreen_clear(this: *mut root::ImTui::TScreen);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN5ImTui7TScreen6resizeEii"]
            pub fn TScreen_resize(
                this: *mut root::ImTui::TScreen,
                pnx: ::std::os::raw::c_int,
                pny: ::std::os::raw::c_int,
            );
        }
        impl TScreen {
            #[inline]
            pub unsafe fn size(&self) -> ::std::os::raw::c_int {
                TScreen_size(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                TScreen_clear(self)
            }
            #[inline]
            pub unsafe fn resize(
                &mut self,
                pnx: ::std::os::raw::c_int,
                pny: ::std::os::raw::c_int,
            ) {
                TScreen_resize(self, pnx, pny)
            }
        }
    }
    extern "C" {
        #[link_name = "\u{1}__Z19ImTui_ImplText_Initv"]
        pub fn ImTui_ImplText_Init() -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__Z23ImTui_ImplText_Shutdownv"]
        pub fn ImTui_ImplText_Shutdown();
    }
    extern "C" {
        #[link_name = "\u{1}__Z23ImTui_ImplText_NewFramev"]
        pub fn ImTui_ImplText_NewFrame();
    }
    extern "C" {
        #[link_name = "\u{1}__Z29ImTui_ImplText_RenderDrawDataP10ImDrawDataPN5ImTui7TScreenE"]
        pub fn ImTui_ImplText_RenderDrawData(
            drawData: *mut root::ImDrawData,
            screen: *mut root::ImTui::TScreen,
        );
    }
    extern "C" {
        #[link_name = "\u{1}__Z22ImTui_ImplNcurses_Initbff"]
        pub fn ImTui_ImplNcurses_Init(
            mouseSupport: bool,
            fps_active: f32,
            fps_idle: f32,
        ) -> *mut root::ImTui::TScreen;
    }
    extern "C" {
        #[link_name = "\u{1}__Z26ImTui_ImplNcurses_Shutdownv"]
        pub fn ImTui_ImplNcurses_Shutdown();
    }
    extern "C" {
        #[link_name = "\u{1}__Z26ImTui_ImplNcurses_NewFramev"]
        pub fn ImTui_ImplNcurses_NewFrame() -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__Z28ImTui_ImplNcurses_DrawScreenb"]
        pub fn ImTui_ImplNcurses_DrawScreen(active: bool);
    }
    extern "C" {
        #[link_name = "\u{1}__Z30ImTui_ImplNcurses_ProcessEventv"]
        pub fn ImTui_ImplNcurses_ProcessEvent() -> bool;
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImDrawCmd>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImDrawCmd>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImDrawCmd>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImDrawCmd>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImDrawIdx>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImDrawIdx>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImDrawIdx>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImDrawIdx>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImDrawChannel_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImDrawChannel>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImDrawChannel>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImDrawChannel>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImDrawChannel>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImDrawCmd_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImDrawCmd>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImDrawCmd>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImDrawCmd>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImDrawCmd>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImDrawIdx_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImDrawIdx>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImDrawIdx>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImDrawIdx>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImDrawIdx>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImDrawVert_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImDrawVert>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImDrawVert>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImDrawVert>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImDrawVert>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImVec4_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImVec4>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImVec4>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImVec4>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImVec4>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImTextureID_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImTextureID>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImTextureID>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImTextureID>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImTextureID>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImVec2_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImVec2>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImVec2>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImVec2>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImVec2>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImU32_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImU32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImU32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImU32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImU32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImWchar>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImWchar>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImWchar>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImWchar>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ptr_ImFont_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<*mut root::ImFont>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<*mut root::ImFont>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<*mut root::ImFont>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<*mut root::ImFont>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImFontAtlasCustomRect_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImFontAtlasCustomRect>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImFontAtlasCustomRect>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImFontAtlasCustomRect>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImFontAtlasCustomRect>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImFontConfig_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImFontConfig>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImFontConfig>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImFontConfig>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImFontConfig>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_float_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<f32>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<f32>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<f32>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<f32>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImWchar_close0_instantiation_1() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImWchar>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImWchar>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImWchar>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImWchar>)
            )
        );
    }
    #[test]
    fn __bindgen_test_layout_ImVector_open0_ImFontGlyph_close0_instantiation() {
        assert_eq!(
            ::std::mem::size_of::<root::ImVector<root::ImFontGlyph>>(),
            16usize,
            concat!(
                "Size of template specialization: ",
                stringify!(root::ImVector<root::ImFontGlyph>)
            )
        );
        assert_eq!(
            ::std::mem::align_of::<root::ImVector<root::ImFontGlyph>>(),
            8usize,
            concat!(
                "Alignment of template specialization: ",
                stringify!(root::ImVector<root::ImFontGlyph>)
            )
        );
    }
}

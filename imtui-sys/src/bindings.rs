/* automatically generated by rust-bindgen */

extern crate imgui_sys;

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    use imgui_sys::ImDrawData;
    pub mod ImTui {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub type TCell = u32;
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct TScreen {
            pub nx: ::std::os::raw::c_int,
            pub ny: ::std::os::raw::c_int,
            pub nmax: ::std::os::raw::c_int,
            pub data: *mut root::ImTui::TCell,
        }
        #[test]
        fn bindgen_test_layout_TScreen() {
            assert_eq!(
                ::std::mem::size_of::<TScreen>(),
                24usize,
                concat!("Size of: ", stringify!(TScreen))
            );
            assert_eq!(
                ::std::mem::align_of::<TScreen>(),
                8usize,
                concat!("Alignment of ", stringify!(TScreen))
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).nx as *const _ as usize },
                0usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(nx)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).ny as *const _ as usize },
                4usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(ny)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).nmax as *const _ as usize },
                8usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(nmax)
                )
            );
            assert_eq!(
                unsafe { &(*(::std::ptr::null::<TScreen>())).data as *const _ as usize },
                16usize,
                concat!(
                    "Offset of field: ",
                    stringify!(TScreen),
                    "::",
                    stringify!(data)
                )
            );
        }
        extern "C" {
            #[link_name = "\u{1}__ZNK5ImTui7TScreen4sizeEv"]
            pub fn TScreen_size(this: *const root::ImTui::TScreen) -> ::std::os::raw::c_int;
        }
        extern "C" {
            #[link_name = "\u{1}__ZN5ImTui7TScreen5clearEv"]
            pub fn TScreen_clear(this: *mut root::ImTui::TScreen);
        }
        extern "C" {
            #[link_name = "\u{1}__ZN5ImTui7TScreen6resizeEii"]
            pub fn TScreen_resize(
                this: *mut root::ImTui::TScreen,
                pnx: ::std::os::raw::c_int,
                pny: ::std::os::raw::c_int,
            );
        }
        impl TScreen {
            #[inline]
            pub unsafe fn size(&self) -> ::std::os::raw::c_int {
                TScreen_size(self)
            }
            #[inline]
            pub unsafe fn clear(&mut self) {
                TScreen_clear(self)
            }
            #[inline]
            pub unsafe fn resize(
                &mut self,
                pnx: ::std::os::raw::c_int,
                pny: ::std::os::raw::c_int,
            ) {
                TScreen_resize(self, pnx, pny)
            }
        }
    }
    extern "C" {
        #[link_name = "\u{1}__Z19ImTui_ImplText_Initv"]
        pub fn ImTui_ImplText_Init() -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__Z23ImTui_ImplText_Shutdownv"]
        pub fn ImTui_ImplText_Shutdown();
    }
    extern "C" {
        #[link_name = "\u{1}__Z23ImTui_ImplText_NewFramev"]
        pub fn ImTui_ImplText_NewFrame();
    }
    extern "C" {
        #[link_name = "\u{1}__Z29ImTui_ImplText_RenderDrawDataP10ImDrawDataPN5ImTui7TScreenE"]
        pub fn ImTui_ImplText_RenderDrawData(
            drawData: *mut root::ImDrawData,
            screen: *mut root::ImTui::TScreen,
        );
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
    }
    extern "C" {
        #[link_name = "\u{1}__Z22ImTui_ImplNcurses_Initbff"]
        pub fn ImTui_ImplNcurses_Init(
            mouseSupport: bool,
            fps_active: f32,
            fps_idle: f32,
        ) -> *mut root::ImTui::TScreen;
    }
    extern "C" {
        #[link_name = "\u{1}__Z26ImTui_ImplNcurses_Shutdownv"]
        pub fn ImTui_ImplNcurses_Shutdown();
    }
    extern "C" {
        #[link_name = "\u{1}__Z26ImTui_ImplNcurses_NewFramev"]
        pub fn ImTui_ImplNcurses_NewFrame() -> bool;
    }
    extern "C" {
        #[link_name = "\u{1}__Z28ImTui_ImplNcurses_DrawScreenb"]
        pub fn ImTui_ImplNcurses_DrawScreen(active: bool);
    }
    extern "C" {
        #[link_name = "\u{1}__Z30ImTui_ImplNcurses_ProcessEventv"]
        pub fn ImTui_ImplNcurses_ProcessEvent() -> bool;
    }
}
